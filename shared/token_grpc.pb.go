// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: barpilot/token_renewer/v1/token.proto

package shared

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TokenProviderService_RenewToken_FullMethodName       = "/barpilot.token_renewer.v1.TokenProviderService/RenewToken"
	TokenProviderService_GetTokenValidity_FullMethodName = "/barpilot.token_renewer.v1.TokenProviderService/GetTokenValidity"
)

// TokenProviderServiceClient is the client API for TokenProviderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ServiceTokenProvider service definition.
type TokenProviderServiceClient interface {
	// RenewToken renews a token and returns the new token, metadata, and expiration time.
	RenewToken(ctx context.Context, in *RenewTokenRequest, opts ...grpc.CallOption) (*RenewTokenResponse, error)
	// GetTokenValidity checks the validity of a token and returns its expiration time.
	GetTokenValidity(ctx context.Context, in *GetTokenValidityRequest, opts ...grpc.CallOption) (*GetTokenValidityResponse, error)
}

type tokenProviderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTokenProviderServiceClient(cc grpc.ClientConnInterface) TokenProviderServiceClient {
	return &tokenProviderServiceClient{cc}
}

func (c *tokenProviderServiceClient) RenewToken(ctx context.Context, in *RenewTokenRequest, opts ...grpc.CallOption) (*RenewTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RenewTokenResponse)
	err := c.cc.Invoke(ctx, TokenProviderService_RenewToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenProviderServiceClient) GetTokenValidity(ctx context.Context, in *GetTokenValidityRequest, opts ...grpc.CallOption) (*GetTokenValidityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTokenValidityResponse)
	err := c.cc.Invoke(ctx, TokenProviderService_GetTokenValidity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TokenProviderServiceServer is the server API for TokenProviderService service.
// All implementations must embed UnimplementedTokenProviderServiceServer
// for forward compatibility.
//
// ServiceTokenProvider service definition.
type TokenProviderServiceServer interface {
	// RenewToken renews a token and returns the new token, metadata, and expiration time.
	RenewToken(context.Context, *RenewTokenRequest) (*RenewTokenResponse, error)
	// GetTokenValidity checks the validity of a token and returns its expiration time.
	GetTokenValidity(context.Context, *GetTokenValidityRequest) (*GetTokenValidityResponse, error)
	mustEmbedUnimplementedTokenProviderServiceServer()
}

// UnimplementedTokenProviderServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTokenProviderServiceServer struct{}

func (UnimplementedTokenProviderServiceServer) RenewToken(context.Context, *RenewTokenRequest) (*RenewTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenewToken not implemented")
}
func (UnimplementedTokenProviderServiceServer) GetTokenValidity(context.Context, *GetTokenValidityRequest) (*GetTokenValidityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokenValidity not implemented")
}
func (UnimplementedTokenProviderServiceServer) mustEmbedUnimplementedTokenProviderServiceServer() {}
func (UnimplementedTokenProviderServiceServer) testEmbeddedByValue()                              {}

// UnsafeTokenProviderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TokenProviderServiceServer will
// result in compilation errors.
type UnsafeTokenProviderServiceServer interface {
	mustEmbedUnimplementedTokenProviderServiceServer()
}

func RegisterTokenProviderServiceServer(s grpc.ServiceRegistrar, srv TokenProviderServiceServer) {
	// If the following call pancis, it indicates UnimplementedTokenProviderServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TokenProviderService_ServiceDesc, srv)
}

func _TokenProviderService_RenewToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenewTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenProviderServiceServer).RenewToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TokenProviderService_RenewToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenProviderServiceServer).RenewToken(ctx, req.(*RenewTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenProviderService_GetTokenValidity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenValidityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenProviderServiceServer).GetTokenValidity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TokenProviderService_GetTokenValidity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenProviderServiceServer).GetTokenValidity(ctx, req.(*GetTokenValidityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TokenProviderService_ServiceDesc is the grpc.ServiceDesc for TokenProviderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TokenProviderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "barpilot.token_renewer.v1.TokenProviderService",
	HandlerType: (*TokenProviderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RenewToken",
			Handler:    _TokenProviderService_RenewToken_Handler,
		},
		{
			MethodName: "GetTokenValidity",
			Handler:    _TokenProviderService_GetTokenValidity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "barpilot/token_renewer/v1/token.proto",
}
